---
- hosts: localhost
  gather_facts: false
  vars_files:
    - config.yml
  tasks:
    - name: Enable Homebrew bundle tap
      homebrew_tap: name="homebrew/bundle"
      environment:
        HOMEBREW_UPGRADE_CLEANUP: "1"
        HOMEBREW_NO_ANALYTICS: "1"
        HOMEBREW_NO_INSECURE_REDIRECT: "1"
        HOMEBREW_CASK_OPTS: "--appdir=/Applications --fontdir=/Library/Fonts"

    - name: Check if Brewfile contains updates
      shell: brew bundle check --file="Brewfile"
      register: bundle_check_result
      ignore_errors: true
      changed_when: false

    - name: Install apps using Brewfile
      shell: brew bundle install --file="Brewfile"
      when: bundle_check_result is failed
      environment:
        HOMEBREW_UPGRADE_CLEANUP: "1"
        HOMEBREW_NO_ANALYTICS: "1"
        HOMEBREW_NO_INSECURE_REDIRECT: "1"
        HOMEBREW_CASK_OPTS: "--appdir=/Applications --fontdir=/Library/Fonts"

    - name: Install packages from Pipfile
      pip: requirements="{{ lookup('env','PWD') }}/Pipfile" state=latest executable=pip3 extra_args="--user"
      environment:
        PIP_REQUIRE_VIRTUALENV: ""
      
    - name: Install packages from Npmfile
      npm: name="{{ item }}" global=true production=true state=present
      with_lines: cat Npmfile

    - name: Install extensions from Vscodefile
      shell: code --install-extension "{{ item }}"
      with_lines: cat Vscodefile
  
    - name: Check if Paragon ExtFS has been installed
      stat: path="/Applications/Paragon ExtFS for Mac.app"
      register: paragon_extfs_check
      changed_when: false
      ignore_errors: true

    - name: Open Paragon ExtFS installer
      command: open "/usr/local/Caskroom/paragon-extfs/11/FSInstaller.app"
      when: not paragon_extfs_check.stat.exists

    - name: Check if Paragon NTFS has been installed
      stat: path="/Applications/Paragon NTFS for Mac 15.app"
      register: paragon_ntfs_check
      changed_when: false
      ignore_errors: true

    - name: Open Paragon NTFS installer
      command: open "/usr/local/Caskroom/paragon-ntfs/15/FSInstaller.app"
      when: not paragon_ntfs_check.stat.exists

    - name: Install dotfiles
      git: repo="{{ system.dotfiles }}" dest="/Users/{{ system.username }}/.dotfiles" update=false

    - name: Init dotfiles
      shell: cd "/Users/{{ system.username }}/.dotfiles/" && ./init.sh

    - name: Cleanup some folders
      file: dest="{{ item }}" state=absent
      with_items:
          - "/Users/{{ system.username }}/Applications"
          - "/Users/{{ system.username }}/Public"
          - "/Applications/Microsoft OneNote.app"
          - "/Applications/Microsoft Outlook.app"
      become: true
      become_user: root
    
    - name: Setup dnscrypt
      ini_file: path="/usr/local/etc/dnscrypt-proxy.toml" section="{{ item.section }}" option="{{ item.option }}" value="{{ item.value }}" state="{{ item.state }}"
      with_items:
        - { section: "null", option: "server_names", value: "", state: "absent" }
        - { section: "null", option: "listen_addresses", value: "['127.0.0.1:53', '[::1]:53']", state: "present" }
        - { section: "null", option: "max_clients", value: "10", state: "present" }
        - { section: "null", option: "ipv4_servers", value: "true", state: "present" }
        - { section: "null", option: "ipv6_servers", value: "", state: "absent" }
        - { section: "null", option: "dnscrypt_servers", value: "true", state: "present" }
        - { section: "null", option: "doh_servers", value: "true", state: "present" }
        - { section: "null", option: "require_dnssec", value: "true", state: "present" }
        - { section: "null", option: "require_nolog", value: "true", state: "present" }
        - { section: "null", option: "require_nofilter", value: "true", state: "present" }
        - { section: "null", option: "fallback_resolver", value: "1.1.1.1:53", state: "present" }
        - { section: "null", option: "ignore_system_dns", value: "true", state: "present" }
        - { section: "null", option: "block_ipv6", value: "true", state: "present" }
        - { section: "null", option: "cache", value: "true", state: "present" }
        - { section: "null", option: "cache_size", value: "8192", state: "present" }
      notify:
        - Restart dnscrypt

    - name: Update dns resolver
      shell: networksetup -setdnsservers "{{ item }}" 127.0.0.1
      with_items:
        - "Wi-Fi"
        - "Thunderbolt Ethernet"
        - "Thunderbolt Bridge"
        - "Bluetooth PAN"
      become: true
      become_user: root

    - name: Enable Homebrew path
      command: launchctl config user path '/usr/local/bin:$PATH'
      become: true
      become_user: root

    - name: Set shell
      user: shell="/bin/zsh" name="{{ system.username }}"
      become: true
      become_user: root

    - name: Set hostname
      shell: >
            systemsetup -setcomputername "{{ system.hostname }}";
            scutil --set ComputerName "{{ system.hostname }}";
            scutil --set HostName "{{ system.hostname }}";
            scutil --set LocalHostName "{{ system.hostname }}";
      become: true
      become_user: root

    - name: Set netbios name
      osx_defaults: domain="/Library/Preferences/SystemConfiguration/com.apple.smb.server" key=NetBIOSName value="{{ system.hostname }}"
      become: true
      become_user: root

    - name: Disable captitative portal assistant to improve security
      osx_defaults: domain="/Library/Preferences/SystemConfiguration/com.apple.captive.control" key="Active" state=present type=bool value=false
      become: true
      become_user: root

    - name: Disable hyperlink auditing beacon for additional privacy
      osx_defaults: domain="com.apple.Safari" key="com.apple.Safari.ContentPageGroupIdentifier.WebKit2HyperlinkAuditingEnabled" state=present type=bool value=false
    
    - name: Disable bootsound
      shell: >
              nvram SystemAudioVolume=" ";
              nvram SystemAudioVolumeDB=" ";
      become: true
      become_user: root

    - name: Set default apps
      command: "duti -s {{ item.app }} {{ item.ext }} all"
      with_items:
        # Set vscode as default for text files
        - { app: "com.microsoft.VSCode", ext: "public.plain-text" }
        # Set vscode as default for common files
        - { app: "com.microsoft.VSCode", ext: "md" }
        - { app: "com.microsoft.VSCode", ext: "cfg" }
        - { app: "com.microsoft.VSCode", ext: "ini" }
        - { app: "com.microsoft.VSCode", ext: "conf" }
        - { app: "com.microsoft.VSCode", ext: "ini" }
        - { app: "com.microsoft.VSCode", ext: "sh" }
        - { app: "com.microsoft.VSCode", ext: "zsh" }
        - { app: "com.microsoft.VSCode", ext: "bat" }
        - { app: "com.microsoft.VSCode", ext: "cmd" }
        - { app: "com.microsoft.VSCode", ext: "xml" }
        - { app: "com.microsoft.VSCode", ext: "plist" }
        # Set vscode as default for Java
        - { app: "com.microsoft.VSCode", ext: "properties" }
        - { app: "com.microsoft.VSCode", ext: "gradle" }
        - { app: "com.microsoft.VSCode", ext: "java" }
        # Set vscode as default for python
        - { app: "com.microsoft.VSCode", ext: "py" }
        - { app: "com.microsoft.VSCode", ext: "yml" }
        - { app: "com.microsoft.VSCode", ext: "yaml" }
        - { app: "com.microsoft.VSCode", ext: "j2" }
        - { app: "com.microsoft.VSCode", ext: "jinja2" }
        # Set vscode as default for C/C++
        - { app: "com.microsoft.VSCode", ext: "cpp" }
        - { app: "com.microsoft.VSCode", ext: "c" }
        - { app: "com.microsoft.VSCode", ext: "h" }
        # Set vscode as default for Posgres
        - { app: "com.microsoft.VSCode", ext: "sql" }
        - { app: "com.microsoft.VSCode", ext: "ddl" }
        - { app: "com.microsoft.VSCode", ext: "dml" }
        - { app: "com.microsoft.VSCode", ext: "pgsql" }
        # Set Quick Time Player as default for music files
        - { app: "com.apple.QuickTimePlayerX", ext: "mp3" }
        - { app: "com.apple.QuickTimePlayerX", ext: "flac" }
        - { app: "com.apple.QuickTimePlayerX", ext: "aac" }
        - { app: "com.apple.QuickTimePlayerX", ext: "wma" }
        - { app: "com.apple.QuickTimePlayerX", ext: "ogg" }
        # Set Quick Time Player as default for video files
        - { app: "com.apple.QuickTimePlayerX", ext: "mpg" }
        - { app: "com.apple.QuickTimePlayerX", ext: "mkv" }
        - { app: "com.apple.QuickTimePlayerX", ext: "mp4" }
        - { app: "com.apple.QuickTimePlayerX", ext: "wmv" }
        - { app: "com.apple.QuickTimePlayerX", ext: "m4a" }

    - name: Remove all tags in Finder
      osx_defaults:
        domain: "com.apple.finder"
        key: FavoriteTagNames
        state: present
        type: array
        value:
          - ""

    - name: Enable spring loading folder when dragging items into it
      osx_defaults: key="com.apple.springing.enable" state=present type=bool value=true

    - name: Enable instant spring loading
      osx_defaults: key="com.apple.springing.delay" state=present type=float value=0.2

    - name: Disable scroll on Dock items
      osx_defaults: domain="com.apple.dock" key="scroll-to-open" state=present type=bool value=false

    - name: Remove all item from Dock
      osx_defaults: domain="com.apple.dock" key="persistent-apps" state=absent

    - name: Expand all panels by default
      osx_defaults: key={{ item }} state=present type=bool value=true
      with_items:
        - "NSNavPanelExpandedStateForSaveMode"
        - "PMPrintingExpandedStateForPrint2"
        - "PMPrintingExpandedStateForPrint"

    - name: Close printer app automatically
      osx_defaults: domain="com.apple.print.PrintingPrefs" key="Quit When Finished" state=present type=bool value=true

    - name: Disable saving new files to iCloud
      osx_defaults: key=NSDocumentSaveNewDocumentsToCloud state=present type=bool value=false

    - name: Disable creating .DS_STORE files on network
      osx_defaults: domain="com.apple.desktopservices" key=DSDontWriteNetworkStores state=present value=true

    - name: Disable creating .DS_STORE files on usb volumes
      osx_defaults: domain="com.apple.desktopservices" key=DSDontWriteUSBStores state=present value=true

    - name: Check for software updates daily
      osx_defaults: domain="com.apple.SoftwareUpdate" key="ScheduleFrequency" state=present type=int value=1

    - name: Disable Airdrop
      osx_defaults: domain="com.apple.NetworkBrowser" key=DisableAirDrop state=present type=bool value=true

    - name: Speedup window resize
      osx_defaults: key=NSWindowResizeTime state=present type=float value=0.1

    - name: Disable crash reporting
      osx_defaults: domain="com.apple.CrashReporter" key=DialogType state=present value=none

    - name: Set screenshot location to Desktop
      osx_defaults: domain="com.apple.screencapture" key="location" state=present value="/Users/{{ system.username }}/Desktop"

    - name: Set screenshot image type to png
      osx_defaults: domain="com.apple.screencapture" key=type state=present value=png

    - name: Disable shadow in screenshots
      osx_defaults: domain="com.apple.screencapture" key="disable-shadow" state=present type=bool value=true

    - name: Disable bonjour service
      osx_defaults: domain="/Library/Preferences/com.apple.mDNSResponder.plist" key="NoMulticastAdvertisements" state=present type=bool value="YES"
      become: true
      become_user: root

    - name: Empty trash securely by default
      osx_defaults: domain="com.apple.finder" key=EmptyTrashSecurely state=present type=bool value=true

    - name: Expand all panes by default
      osx_defaults: domain="com.apple.finder.FXInfoPanesExpanded" key="{{ item }}" state=present type=bool value=true
      with_items:
        - "General"
        - "OpenWith"
        - "Privileges"

    - name: Set timemachine backup interval to 24h
      osx_defaults: domain="/System/Library/LaunchDaemons/com.apple.backupd-auto" key=StartInterval state=present type=int value=86400
      become: yes
      become_user: root

    - name: Disable time machine prompt for new disks as backup volume
      osx_defaults: domain="/Library/Preferences/com.apple.TimeMachine" key=DoNotOfferNewDisksForBackup state=present type=bool value=true
      become: true
      become_user: root

    - name: Disable time machine backup while on battery
      osx_defaults: domain="/Library/Preferences/com.apple.TimeMachine" key=RequiresACPower state=present type=bool value=true
      become: true
      become_user: root

  handlers:
    - name: Restart dnscrypt
      service: name="dnscrypt-proxy" state="restarted"

- hosts: "{{ vm.hostname }}"
  gather_facts: false
  vars_files:
    - config.yml
  tasks:
    - name: Check if host is running if not skip setup
      wait_for: host="{{ ansible_host }}" port=5986 timeout=3 delay=1
      ignore_errors: true
      register: check_host_alive
      delegate_to: localhost

    - name: Install chocolatey packages
      # Note: Ansible installs chocolatey automatically if not present
      win_chocolatey: name="{{ item }}" state=present
      with_items: "{{ vm.packages.chocolatey }}"
      when: not check_host_alive is failed

    - name: Upgrade chocolatey packages
      win_chocolatey: name=all state=latest
      when: not check_host_alive is failed

    - name: Set hostname
      win_domain_membership: domain_admin_user="{{ ansible_user }}" domain_admin_password="{{ ansible_password }}" hostname="{{ vm.hostname }}" state=workgroup workgroup_name=WORKGROUP
      when: not check_host_alive is failed

    - name: Enable firewall
      win_firewall:
        state: enabled
        profiles:
          - Domain
          - Private
          - Public
      when: not check_host_alive is failed

    - name: Set custom settings via setup script
      script: "Win10.ps1 {{ item }}"
      with_flattened: "{{ vm.settings }}"
      when: not check_host_alive is failed